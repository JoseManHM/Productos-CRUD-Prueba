-- Sentencias para crear BD, registros, tablas y procedimientos almacenados
-- CREACIÓN DE BASE DE DATOS
CREATE DATABASE `PRODUCTOS_CRUD`;

USE `PRODUCTOS_CRUD`;

-- CREACIÓN DE TABLAS

CREATE TABLE `DEPARTAMENTOS`(
`ID` INT(1) NOT NULL AUTO_INCREMENT PRIMARY KEY,
`DEPARTAMENTO` VARCHAR(255) NOT NULL,
`ORDEN` INT(5) NOT NULL DEFAULT 1
);

CREATE TABLE `CLASES`(
`ID` INT(2) NOT NULL AUTO_INCREMENT PRIMARY KEY,
`ID_DEPARTAMENTO` INT(11) NOT NULL,
`CLASE` VARCHAR(255) NOT NULL,
`ORDEN` INT(5) NOT NULL DEFAULT 1,
FOREIGN KEY (`ID_DEPARTAMENTO`) REFERENCES `DEPARTAMENTOS` (`ID`)
);

CREATE TABLE `FAMILIAS`(
`ID` INT(3) NOT NULL AUTO_INCREMENT PRIMARY KEY,
`ID_CLASE` INT(11) NOT NULL,
`FAMILIA` VARCHAR(255) NOT NULL,
`ORDEN` INT(5) NOT NULL DEFAULT 1,
FOREIGN KEY (`ID_CLASE`) REFERENCES `CLASES` (`ID`)
);

CREATE TABLE `PRODUCTOS`(
`ID` INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
`ID_DEPARTAMENTO` INT(1) NOT NULL,
`ID_CLASE` INT(2) NOT NULL,
`ID_FAMILIA` INT(3) NOT NULL,
`SKU` INT(6) NOT NULL,
`ARTICULO` VARCHAR(15) NOT NULL,
`MARCA` VARCHAR(15) NOT NULL,
`MODELO` VARCHAR(20) NOT NULL,
`FECHA_ALTA` DATE,
`STOCK` INT(9) NOT NULL DEFAULT 0,
`CANTIDAD` INT(9),
`DESCONTINUADO` INT(1) NOT NULL,
`FECHA_BAJA` DATE,
`ACTIVO` INT(1) NOT NULL DEFAULT 1 COMMENT '1:ACTIVO, 0:INACTIVO',
FOREIGN KEY (`ID_DEPARTAMENTO`) REFERENCES `DEPARTAMENTOS` (`ID`),
FOREIGN KEY (`ID_CLASE`) REFERENCES `CLASES` (`ID`),
FOREIGN KEY (`ID_FAMILIA`) REFERENCES `FAMILIAS` (`ID`)
);

-- INSERCIÓN DE DATOS (DEPARTAMENTOS, CLASES Y FAMILIAS)
INSERT INTO `DEPARTAMENTOS` (`DEPARTAMENTO`, `ORDEN`) VALUES
('DOMESTICOS',1),('ELECTRONICA',2),('MUEBLE SUELTO',3),('SALAS, RECAMARAS, COMEDORES',4);

INSERT INTO `CLASES` (`ID_DEPARTAMENTO`,`CLASE`,`ORDEN`) VALUES
(1,'COMESTIBLES',1),(1,'LICUADORAS',2),(1,'BATIDORAS',3),(1,'CAFETERAS',4),(2,'AMPLIFICADORES CAR AUDIO',1),(2,'AUTO STEREOS',2),(3,'COLCHON',1),
(3,'JUEGO BOX',2),(4,'SALAS',1),(4,'COMPLEMENTOS PARA SALA',2),(4,'SOFAS CAMA',3);

INSERT INTO `FAMILIAS` (`ID_CLASE`,`FAMILIA`,`ORDEN`) VALUES
(1,'SIN NOMBRE',0),(2,'LICUADORAS',1),(2,'EXCLUSIVO COPPEL COMPRAS',2),(3,'BATIDORA MANUAL',1),(3,'PROCESADOR',2),(3,'PICADORA',3),(3,'BATIDORA PEDESTAL',4),
(3,'BATIDORA FUENTE DE SODAS',5),(3,'MULTIPRACTIVOS',6),(3,'EXCLUSIVOS COPPEL COMPRAS',7),(4,'CAFETERAS',1),(4,'PERCOLADORAS',2),(5,'AMPLIFICADOR/RECEPTOR',1),
(5,'KIT DE INSTALACION',2),(5,'AMPLIFICADORES COPPEL',3),(6,'AUTOESTEREO CD C/BOCINA',1),(6,'ACCESORIOS CAR AUDIO',2),(6,'AMPLIFICADOR',3),(6,'ALARMA AUTO/CASA/OFICINA',4),
(6,'SIN MECANISMO',5),(6,'CON CD',6),(6,'MULTIMEDIA',7),(6,'PAQUETE SIN MECANISMO',8),(6,'PAQUETE CON CD',9),(7,'PILLOW TOP KS',1),(7,'PILLOW TOP DOBLE KS',2),(7,'HULE ESPUMA KS',3),
(8,'ESTANDAR INDIVIDUAL',1),(8,'PILLOW TOP INDIVIDUAL',2),(8,'PILLOW TOP DOBLE INDIVIDUAL',3),(9,'ESQUINERAS SUPERIORES',1),(9,'TIPO L SECCIONAL',2),(10,'SILLON OCASIONAL',1),
(10,'PUFF',2),(10,'BAUL',3),(10,'TABURETE',4),(11,'SOFA CAMA TAPIZADO CON',1),(11,'SOFACAMA CLASICO',2),(11,'ESTUDIO',3);

-- CREACION DE PROCEDIMIENTOS ALMACENADOS
-- STORAGE PROCEDURE PARA VERIFICAR SI EXISTE EL SKU
DELIMITER $$
CREATE PROCEDURE verifySkuExistente
(
	IN skuu int
)

BEGIN
	IF EXISTS(SELECT SKU FROM productos WHERE SKU = skuu) THEN
		SELECT 1;--EXISTENTE
	ELSE 
		SELECT 0;--NO EXISTENTE
	END IF; 
END $$

DELIMITER //
CREATE PROCEDURE altaProductos
(
	IN departamento int,
	IN clase int,
	IN familia int,
	IN sku int,
	IN articulo varchar(15),
	IN marca varchar(15),
	IN modelo varchar(20),
	IN stock int(9),
	IN cantidad int(9)
)

BEGIN
	INSERT INTO `PRODUCTOS` (`ID_DEPARTAMENTO`,`ID_CLASE`,`ID_FAMILIA`,`SKU`,`ARTICULO`,`MARCA`,`MODELO`,`FECHA_ALTA`,`STOCK`,`CANTIDAD`,`DESCONTINUADO`,`FECHA_BAJA`) VALUES
	(departamento, clase, familia, sku, articulo, marca, modelo, DATE(NOW()), stock, cantidad, 0, '1900-01-01');
END //

--CALL altaProductos(1,1,1,0,'Galletas','Coppel','100 gramos',2,2);

DELIMITER //
CREATE PROCEDURE cambioProductos
(
	IN departamento int,
	IN clase int,
	IN familia int,
	IN skuu int,
	IN articulo varchar(15),
	IN marca varchar(15),
	IN modelo varchar(20),
	IN stock int(9),
	IN cantidad int(9),
	IN descontinuado int(1),
	IN fecha_alt varchar(10),
	IN fecha_baj varchar(10)
)

BEGIN
	UPDATE `PRODUCTOS`
	SET ID_DEPARTAMENTO = departamento, ID_CLASE = clase, ID_FAMILIA = familia, ARTICULO = articulo, MARCA = marca, MODELO = modelo, STOCK = stock, CANTIDAD = cantidad, 
	DESCONTINUADO = descontinuado, FECHA_ALTA = fecha_alt, FECHA_BAJA = fecha_baj WHERE SKU = skuu;
END //
--CALL cambioProductos(1,1,1,0,'GALLETAS','COPPEL','100 GRS',3,3,0,'2022-11-02','1900-01-01');

DELIMITER //
CREATE PROCEDURE bajaProductos
(
	IN skuu int
)

BEGIN
	UPDATE `PRODUCTOS`
	SET ACTIVO = 0 WHERE SKU = skuu;
END //
--CALL bajaProductos(0);

DELIMITER //
CREATE PROCEDURE consultaProductosCambio
(
	IN skuu int
)

BEGIN
	SELECT p.ARTICULO, p.MARCA, p.MODELO, p.FECHA_ALTA, p.STOCK, p.CANTIDAD, p.DESCONTINUADO, p.FECHA_BAJA, f.FAMILIA, f.ID AS ID_FAM,  c.CLASE, c.ID AS ID_CLAS, d.DEPARTAMENTO, d.ID AS ID_DEP FROM productos p 
	INNER JOIN familias f ON p.ID_FAMILIA = f.ID INNER JOIN clases c ON p.ID_CLASE = c.ID INNER JOIN departamentos d ON p.ID_DEPARTAMENTO = d.ID 
	WHERE p.SKU = skuu AND p.ACTIVO = 1;
END //

--CALL consultaProductosCambio(0);

DELIMITER //
CREATE PROCEDURE consultaProductos
(
	IN skuu int
)

BEGIN
	SELECT p.ARTICULO, p.MARCA, p.MODELO, p.FECHA_ALTA, p.STOCK, p.CANTIDAD, p.DESCONTINUADO, p.FECHA_BAJA, f.FAMILIA, f.ID AS ID_FAM,  c.CLASE, c.ID AS ID_CLAS, d.DEPARTAMENTO, d.ID AS ID_DEP, p.ACTIVO FROM productos p 
	INNER JOIN familias f ON p.ID_FAMILIA = f.ID INNER JOIN clases c ON p.ID_CLASE = c.ID INNER JOIN departamentos d ON p.ID_DEPARTAMENTO = d.ID 
	WHERE p.SKU = skuu;
END //

--CALL consultaProductos(0);

DELIMITER //
CREATE PROCEDURE obtenerClasesPorDept
(
	IN departamento int
)

BEGIN
	SELECT ID, CLASE FROM CLASES WHERE ID_DEPARTAMENTO = departamento ORDER BY ORDEN;
END //

--CALL obtenerClasesPorDept(1);

DELIMITER //
CREATE PROCEDURE obtenerFamiliasPorClas
(
	IN clase int
)

BEGIN 
	SELECT ID, FAMILIA FROM FAMILIAS WHERE ID_CLASE = clase ORDER BY ORDEN;
END //

--CALL obtenerFamiliasPorClas(1);

DELIMITER //
CREATE PROCEDURE obtenerDptos()

BEGIN
	SELECT ID, DEPARTAMENTO FROM DEPARTAMENTOS ORDER BY ORDEN;
END //

--CALL obtenerDptos()